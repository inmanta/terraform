"""
    Copyright 2021 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import std

entity Provider:
    """
    A Terraform provider

    :attr namespace: Organization in the terraform registry, packaging this provider
    :attr type: The provider type (e.g. "aws", "vsphere", "local")
    :attr version: The version of the provider to use, setting it to null will get the latest one
    :attr alias: An alias to differentiate this provider from other providers with the same binary 
        but different config
    :attr config: The config to apply to this provider
    :attr auto_agent: Whether to start an agent automatically or not.  If set to false
        the relation agent_config should be set manually.
    :rel agent_config: This needs to be set only if auto_agent=false
    """
    string namespace
    string type
    string version = "latest"
    string alias = ""
    dict config

    bool auto_agent=true
end
Provider.agent_config [1] -- std::AgentConfig
index Provider(namespace, type, version, alias)

implement Provider using std::none
implement Provider using agentConfig when auto_agent

implementation agentConfig for Provider:
    self.agent_config = std::AgentConfig(
        autostart=true,
        agentname="{{ self.namespace }}-{{ self.type }}-{{ self.version }}",
        uri="local:",
        provides=self,
    )
end

entity Resource extends std::PurgeableResource:
    """
    A Terraform resource

    :attr type: The type of resource this is
    :attr name: An arbitrary name to identify this resource
    :attr config: The configuration for this resource
    :attr terraform_id: If this is set, and the resource state is not stored in parameter yet,
        the handler will first try to import it, using the provided value as terraform id.
    :rel provider: The terraform provider for this resource
    """
    string type
    string name
    string? terraform_id = null
    dict config
    bool purge_on_delete = false
end
Resource.provider [1] -- Provider
index Resource(provider, type, name)

implement Resource using std::none
