"""
    Copyright 2021 Inmanta

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Contact: code@inmanta.com
"""
import std
import terraform::config

entity Provider:
    """
    A Terraform provider

    :attr namespace: Organization in the terraform registry, packaging this provider
    :attr type: The provider type (e.g. "aws", "vsphere", "local")
    :attr version: The version of the provider to use, setting it to null will get the latest one
    :attr alias: An alias to differentiate this provider from other providers with the same binary 
        but different config
    :attr config: The config to apply to this provider
    :attr manual_config: Whether the user wishes to provide the config as a dict, if false
        the config should be provided as a config block entity tree via the root_config
        relation.
    :attr auto_agent: Whether to start an agent automatically or not.  If set to false
        the relation agent_config should be set manually.
    :rel agent_config: This needs to be set only if auto_agent=false
    """
    string namespace
    string type
    string version = "latest"
    string alias = ""
    dict config
    bool manual_config = true

    bool auto_agent = true
end

Provider.agent_config [1] -- std::AgentConfig
"""Relation to the agent config"""

Provider.root_config [0:1] -- terraform::config::Block
"""Relation to the root configuration, or null if manual_config is true"""

index Provider(namespace, type, version, alias)

implement Provider using providerManualConfig when self.manual_config
implement Provider using providerBlockConfig when not self.manual_config
implement Provider using agentConfig when auto_agent

implementation agentConfig for Provider:
    self.agent_config = std::AgentConfig(
        autostart=true,
        agentname="{{ self.namespace }}-{{ self.type }}-{{ self.version }}",
        uri="local:",
        provides=self,
    )
end

implementation providerManualConfig for Provider:
    """
    If self.manual_config is true, the user should provide the config as a dict
    directly to the entity.  The root_config relation should then be set to null.
    """
    self.root_config = null
end

implementation providerBlockConfig for Provider:
    """
    If self.manual_config is false, the user should provide the root_config
    relation, the Block entity will be serialized and attached to this entity
    config attribute.
    """
    # Making sure our root_config will be recognized as such
    self.root_config.name = null
    
    # For the provider, we don't store any state in parameter, so the state
    # is actually (assumed to be) the current config
    self.root_config._state = self.root_config._config

    self.config = self.root_config._config
end

entity Resource extends std::PurgeableResource:
    """
    A Terraform resource

    :attr type: The type of resource this is
    :attr name: An arbitrary name to identify this resource
    :attr config: The configuration for this resource
    :attr manual_config: Whether the user wishes to provide the config as a dict, if false
        the config should be provided as a config block entity tree via the root_config
        relation.
    :attr terraform_id: If this is set, and the resource state is not stored in parameter yet,
        the handler will first try to import it, using the provided value as terraform id.
    :rel provider: The terraform provider for this resource
    """
    string type
    string name
    string? terraform_id = null
    dict config
    bool manual_config = true
    bool purge_on_delete = false
end

Resource.provider [1] -- Provider
"""Relation to the resource provider"""

Resource.root_config [0:1] -- terraform::config::Block
"""Relation to the root configuration, or null if manual_config is true"""

index Resource(provider, type, name)

implement Resource using resourceManualConfig when self.manual_config
implement Resource using resourceBlockConfig when not self.manual_config

implementation resourceManualConfig for Resource:
    """
    If self.manual_config is true, the user should provide the config as a dict
    directly to the entity.  The root_config relation should then be set to null.
    """
    self.root_config = null
end

implementation resourceBlockConfig for Resource:
    """
    If self.manual_config is false, the user should provide the root_config
    relation, the Block entity will be serialized and attached to this entity
    config attribute.
    """
    # Making sure our root_config will be recognized as such
    self.root_config.name = null

    # Get the state from parameter and attach it to the config block
    self.root_config._state = safe_resource_state(self)

    self.config = self.root_config._config
end
